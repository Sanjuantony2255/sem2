Implementation of KNN classification algorithm
exp5

1

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics

# Load the iris dataset
iris = load_iris()
x = iris.data
y = iris.target

# Split the dataset into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)

# Create the KNN classifier
c_knn = KNeighborsClassifier(n_neighbors=3)

# Fit the classifier to the training data
c_knn.fit(x_train, y_train)

# Make predictions on the test data
y_pred = c_knn.predict(x_test)

# Print accuracy
print("Accuracy:", metrics.accuracy_score(y_test, y_pred))

# Sample prediction
sample = [[2, 2, 2, 2]]
pred = c_knn.predict(sample)
pred_v = [iris.target_names[p] for p in pred]

print(pred_v)

2

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

# Load the iris dataset
X, y = load_iris(return_X_y=True)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=0)

# Create the Gaussian Naive Bayes classifier
gnb = GaussianNB()

# Fit the model and make predictions
y_pred = gnb.fit(X_train, y_train).predict(X_test)

# Print predictions
print("Predictions:", y_pred)

# New sample prediction
x_new = [[5, 5, 4, 4]]
y_new = gnb.predict(x_new)
print("Predicted output for [[5, 5, 4, 4]]:", y_new)

# Print the Naive Bayes score
print("Naive Bayes score:", gnb.score(X_test, y_test))

3

import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
#load iris data
data = load_iris()
data.data.shape
print('classes to predict: ',data.target_names)
print('Features: ',data.feature_names)
X = data.data
y = data.target
display (X.shape, y.shape)
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
X_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 50, test_size = 0.25)
#default criterion is Gini
classifier = DecisionTreeClassifier()
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
from sklearn.metrics import accuracy_score
print('Accuracy on train data using Gini: ',accuracy_score (y_true = y_train, y_pred = classifier.predict(X_train)))
print('Accuracy on test data using Gini: ',accuracy_score (y_true = y_test, y_pred = y_pred))
#change criterion to entropy
classifier_entropy = DecisionTreeClassifier(criterion='entropy')
classifier_entropy.fit(X_train, y_train)
y_pred_entropy = classifier_entropy.predict(X_test)
print('Accuracy on train data using entropy', accuracy_score (y_true=y_train, y_pred = classifier_entropy.predict(X_train)))
print('Accuracy on test data using entropy', accuracy_score(y_true=y_test, y_pred=y_pred_entropy))
#change criterion to entropy with min_samples_split to 50. Default value is 2
classifier_entropy1 = DecisionTreeClassifier (criterion='entropy', min_samples_split=50)
classifier_entropy1.fit(X_train, y_train)
y_pred_entropy1 = classifier_entropy1.predict(X_test)
print('Accuracy on train data using entropy', accuracy_score (y_true=y_train, y_pred = classifier_entropy1.predict(X_train)))
print('Accuracy on test data using entropy', accuracy_score (y_true=y_test, y_pred = y_pred_entropy1))
#visualise the decision tree
from sklearn.tree import export_graphviz
from six import StringIO
from IPython.display import Image
import pydotplus
dot_data = StringIO()
#the students can try using classifier, classifier_entropy and classifier_entropy1 #as first parameter below.
export_graphviz(classifier, out_file = dot_data, filled = True, rounded =
True,special_characters = True, feature_names = data.feature_names, class_names = data.target_names)